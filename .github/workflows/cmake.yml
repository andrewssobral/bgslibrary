name: CMake auto build on OpenCV 3.4.7

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  container:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container: andrewssobral/opencv3:3.4.7

    steps:
    - uses: actions/checkout@v3

    - name: Compile C++ library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      run: cd build && cmake .. && make -j $(nproc)

    - name: Build and install the python wrapper
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: git config --global --add safe.directory /__w/bgslibrary/bgslibrary && git submodule update --init --recursive && python setup.py build && python setup.py install

    - name: Compile the C++ QT User Interface
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: cd gui/qt/build && cmake .. && make -j $(nproc)

    - name: Compile examples
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: cd examples/build && cmake .. && make -j $(nproc)
